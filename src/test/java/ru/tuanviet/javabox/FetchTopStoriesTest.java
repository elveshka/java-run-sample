package ru.tuanviet.javabox;

import com.github.tomakehurst.wiremock.junit.WireMockRule;
import org.junit.Rule;
import org.junit.Test;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
import static org.assertj.core.api.Assertions.assertThat;

public class FetchTopStoriesTest {

    @Rule
    public WireMockRule wireMockRule = new WireMockRule(
            options().dynamicPort());
    FetchTopStories sutFetchTopStories;

    @Test
    public void shouldReturnStatusOk() {
        //given
        stubFor(get(urlEqualTo("/"))
                .willReturn(aResponse().withBodyFile("testIds.json")));

        //when
        sutFetchTopStories = new FetchTopStories(wireMockRule.baseUrl(), FetchTopStories.DEFAULT_TIMEOUT);

        //then
        assertThat(200).isEqualTo(sutFetchTopStories.getResponse().code());
    }

    @Test
    public void shouldReturnEqualString() {
        //given
        stubFor(get(urlEqualTo("/"))
                .willReturn(aResponse().withBodyFile("testIds.json")));
        //when
        sutFetchTopStories = new FetchTopStories(wireMockRule.baseUrl(), FetchTopStories.DEFAULT_TIMEOUT);

        assertThat("[ 28860713, 28859828, 28862247, 28859521, 28861618, 28845593, 28859610, 28862671, 28838445, 28847065, 28862439, 28859449, 28833309, 28844101, 28861310, 28814742, 28860308, 28856730, 28857494, 28862053, 28861912, 28837760, 28846074, 28859324, 28838210, 28860861, 28856203, 28853915, 28846076, 28852857, 28859083, 28855399, 28857373, 28830226, 28858285, 28846004, 28830328, 28856235, 28845890, 28850036, 28856244, 28854478, 28861594, 28827451, 28855654, 28854868, 28858427, 28858909, 28854808, 28861970, 28845560, 28861820, 28862296, 28857738, 28858033, 28860871, 28854598, 28861633, 28849220, 28854616, 28851433, 28849101, 28852067, 28853335, 28862082, 28845844, 28850366, 28838324, 28845505, 28852348, 28854701, 28857434, 28850169, 28856910, 28846051, 28834117, 28832244, 28835542, 28831319, 28838710, 28850640, 28861899, 28851911, 28854959, 28851533, 28860055, 28853329, 28854064, 28847909, 28850513, 28828949, 28845089, 28839711, 28855596, 28859029, 28861797, 28854592, 28830921, 28848507, 28845124, 28837181, 28852109, 28858846, 28849854, 28851484, 28840102, 28835690, 28827785, 28849858, 28861198, 28849441, 28858814, 28849462, 28853190, 28857000, 28856978, 28833985, 28861074, 28833933, 28856957, 28852643, 28855629, 28849157, 28859220, 28844770, 28859382, 28844872, 28856386, 28848070, 28838716, 28851021, 28857870, 28860071, 28855860, 28852896, 28848858, 28855464, 28849294, 28825210, 28844142, 28837333, 28858754, 28836382, 28855219, 28853636, 28839573, 28857567, 28856703, 28836793, 28854625, 28855065, 28859779, 28850861, 28830640, 28825352, 28861035, 28860577, 28858479, 28829668, 28855071, 28860479, 28852791, 28854938, 28835844, 28841177, 28855183, 28859294, 28846447, 28833213, 28838959, 28836151, 28821341, 28849065, 28829456, 28860299, 28845971, 28845424, 28851512, 28834462, 28840700, 28838918, 28841366, 28841501, 28859734, 28847094, 28837998, 28853244, 28851487, 28826018, 28823774, 28845626, 28816366, 28851510, 28842535, 28838573, 28852552, 28842344, 28859071, 28838099, 28834260, 28851641, 28856135, 28843072, 28840066, 28840961, 28824985, 28853662, 28827509, 28854681, 28858386, 28830243, 28833525, 28824971, 28827355, 28854823, 28838053, 28819030, 28829547, 28834381, 28830554, 28846620, 28829765, 28825820, 28851824, 28846371, 28837690, 28830650, 28845783, 28831031, 28843749, 28831347, 28839424, 28830007, 28845570, 28821455, 28849319, 28847178, 28840617, 28844527, 28835973, 28834931, 28811947, 28854348, 28853482, 28838852, 28838112, 28846024, 28860202, 28817602, 28826005, 28829843, 28849113, 28850573, 28831673, 28835660, 28844838, 28860110, 28847456, 28830444, 28860091, 28814352, 28850282, 28860054, 28860036, 28860033, 28849544, 28850224, 28839948, 28830919, 28835317, 28856862, 28855768, 28831713, 28841849, 28859213, 28826376, 28854084, 28826552, 28825902, 28821470, 28852745, 28828907, 28817683, 28826023, 28855293, 28839696, 28829777, 28832616, 28842853, 28843212, 28859806, 28825705, 28859797, 28843122, 28851572, 28843047, 28855827, 28861189, 28819387, 28838769, 28850984, 28838132, 28826246, 28858847, 28838798, 28829898, 28838778, 28833628, 28827388, 28820012, 28824706, 28857961, 28826600, 28855484, 28830401, 28819548, 28828621, 28814438, 28847310, 28827957, 28850852, 28820601, 28824996, 28850720, 28831828, 28842702, 28824089, 28844869, 28854658, 28822055, 28830211, 28848346, 28854580, 28857167, 28831393, 28858354, 28855191, 28819489, 28833866, 28841550, 28826974, 28850704, 28852956, 28824890, 28854830, 28859215, 28845590, 28815778, 28859185, 28825307, 28855013, 28859929, 28859098, 28820602, 28846796, 28852046, 28817494, 28845561, 28815118, 28851303, 28842609, 28842733, 28825778, 28858990, 28830677, 28847512, 28827051, 28829266, 28857713, 28825009, 28812403, 28825049, 28828644, 28858896, 28831551, 28841544, 28819927, 28857550, 28845817, 28822886, 28817599, 28843893, 28841305, 28821498, 28841722, 28822559, 28840966, 28858753, 28850165, 28818622, 28817625, 28847125, 28857163, 28820090, 28855312, 28816092, 28820613, 28818648, 28858557, 28846336, 28820342, 28817034, 28860808, 28860039, 28827648, 28825136, 28850174, 28819025, 28838327, 28854556, 28828867, 28827293, 28835775, 28856090, 28812602, 28848096, 28855968, 28845765, 28823751, 28812305, 28817721, 28815502, 28840338, 28826437, 28817477, 28828328, 28820230, 28850839, 28834850, 28855479, 28815724, 28822990, 28827633, 28844030, 28843998, 28825185, 28830708, 28846453, 28819318, 28814469, 28851330, 28827357, 28825926, 28847132, 28857474, 28816876, 28822468, 28848706, 28833039, 28818853, 28846126, 28857261, 28817554, 28816098, 28839406, 28830058, 28854402, 28852931, 28817102, 28813291, 28829716, 28851738, 28854077, 28813246, 28840392, 28813371, 28856301, 28819131, 28845591, 28854768, 28845580, 28819518, 28843742, 28853262, 28843335, 28828348, 28815710, 28813787, 28819378, 28855594, 28845715, 28818493, 28855535, 28855519, 28814566, 28812486, 28817096, 28830420, 28820507, 28856855, 28847149, 28855360, 28855298, 28811788, 28859650, 28816143, 28843501, 28855142, 28851749, 28828132 ]")
                .isEqualTo(sutFetchTopStories.getIds());
    }
}
